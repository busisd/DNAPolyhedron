Guide to Using DNAPolyhedronMethods.py
To succesfully iterate polyhedra using DNAPolyhedronMethods.py, follow the instructions below.
An example of a process you could follow is shown below.

1. Design your polyhedra
 - For each polyhedron type (one or more):
  a) First, determine the locations of its vertices. The absolute location of all the vertices shouldn't matter.
  b) Then, determine which vertices you want to draw an edge between.
  c) Next, determine which edges should have binding sites, and where.
  d) Give each binding site a string identifier. A binding site will only match with a protein connector that 
     has the same string identifier.
  e) Finally, determine the direction vectors for each binding site. The direction vector is a vector that
     describes the angle at which a protein connector will connect to the site, and must be perpendicular
     to the binding site's edge.

 - Alternatively, if you have designed this type of polyhedron in the past, you can instead load it from file (see step 3).
   
2. Design your connectors
 - For each connector type (one or more):
  a) Determine the string identifiers for the two ends of the connector
  b) Determine the length of the connector
  c) Determine the twist angle of the connector
  
 - Alternatively, if you have already designed this type of connector, it can be loaded from a file (see step 4).
 
3. Input your polyhedra
 - For each polyhedron type, you must instantiate a DNAPolyhedron using that data.
 - Example:
   trianglePoly = DNAPolyhedron(((10,2,3), (0,0,0), (4,3,12)), ((0,1),(1,2)), ((0, .7, "A", (1,1,1)), (1, .5, "B", (1,1,0))))
 - The input is of the form DNAPolyhedron( (vertices), (edges), (binding sites) )
  a) Vertices is a list of 3-tuples that represent  coordinate locations. It is a list of lists, so care must 
     be taken with parentheses.
	 Ex: ((0,0,0), (1,1,1), (0,1,0)) is a polyhedron with 3 vertices
  b) Edges is a list of 2-tuples, each of which is a pair of indices (starting at 0) for the vertices list. So, if your 
     vertex list is of the form (a,b,c,d), then (0,2) creates an edge between vertices a and c. 
	 Ex: ((0,1), (1,2), (0,2)) mutually joins the first 3 vertices of a polyhedron.
  c) BindingSites is a list of 4-tuples. Each 4-tuple has the following entries:
     i) An index that refers to the list of edges: this is the edge that the binding site is on.
	ii) A number between 0 and 1: this is the percentage of the way along the edge that the binding site is.
   iii) A string identifier: the binding site will only bind to a connector with the same string ID.
    iv) A direction vector: when a connector attaches to this site, it will point in the direction of this vector.
	    The vector must be perpendicular to the binding site's edge for iteratePoly to work.
	 Ex: (0, .5, "A", (1,1,1)) creates a binding site halfway along the first edge, with ID "A", that
	     will connect to a protein pointing in direction (1,1,1).\
		 
 - To save the polyhedron you created, do: polyName.savePoly("newName.txt")
 - Alternatively, if you already created your poly and saved it, you can load it as follows:
   myPoly = DNAPolyhedron.loadPoly("name.txt")
		 
4. Input your connectors
 - For each connector, you must instantiate a proteinConnector using your data.
 - Example: connector = ProteinConnector("A","B",10,0)
 - Input is of the form (site1, site2, length, twist)
     i) Site1 is the string ID of the first site, determining what binding sites this edge will bind to.
	ii) Site2 is the string ID of the second site. 
   iii) Length is the length of the connector.
    iv) Twist is the twist angle, in degrees, of the connector.

 - To save the connector you created, do: connName.saveConnector("newName.txt")
 - Alternatively, if you already created your connector and saved it, you can load it as follows:
   ProteinConnector.loadConnector("name.txt")

5. Run iteratePoly
 - You are now ready to create the web of polyhedra and connectors using iteratePoly. 
 - The iteratePoly method is called as follows: iteratePoly(iterations, polyTypes, connectorTypes)
  a) Iterations is simply the number of iterations for which the program will attempt to create a new polyhedron.
     Note that the resulting number of polyhedramay be smaller if polyhedron that would have been created collides 
	 with an existing polyhedron and is deleted.
  b) polyTypes is a list of the types of polyhedra you wish to iterate over. Note that if you only one poly type,
     you still must pass a list by using a comma: (poly,).
  c) connectorTypes is a list of the types of connectors. Again, you must pass a list even if you only have one connector
     type: (connector,) or (conn1, conn2)
 - The function returns two things: a list of DNAPolyhedra and a list of paired coordinates representing connectors.
   Remember to store the result of your function call, for example: polyList,connList = iteratePoly( ... )
 - Example: P,D = iteratePoly(5, (A,), (connector,))
 
6. Run massPDB
 - massPDB turns the results of iteratePoly into a group of .pdb files.
 - It is called as follows: massPDB(polyList, connectorList, folderName)
 - PolyList and connectorList are the results of your iteratePoly call, while folderName is the name of the 
   folder you want to store your .pdb files in.
   
7. Use loadAll to view your web
 - loadall is a command withing PyMol that opens every specified file within a folder.
 - First, open PyMol. It is helpful navigate to the directory that contains your new folder of .pdb files.
 - Then, type: loadall {path to folder}/foldername/*.pdb
   ({path to folder} is only required if you did not navigate to the folder's parent directory already)
 - You should be seeing your web of polyhedra!
 
Addendum 1. Example processes
 - Example 1: Making the Elements from Scratch
poly = DNAPolyhedron(((10, 10, 10), (10, -10, -10), (-10, 10, -10), (-10, -10, 10)), ((0,1),(0,2),(0,3),(1,2),(1,3),(2,3)), ((0, .5, "A", (1,0,0)), (1, .5, "B", (0,1,0))))
poly.savePoly("tetra_ex1.txt")
conn = ProteinConnector("A", "B", 25, 30)
conn.saveConnector("connector_ex1.txt")
P,D = iteratePoly(25, (poly,), (conn,))
massPDB(P,D,"folder_ex1")

 - Example 2: Loading the Elements
 - (Saved elements are provided)
poly = DNAPolyhedron.loadPoly("fullTetra.txt")
conn1 = ProteinConnector.loadConnector("fullConn1.txt")
conn2 = ProteinConnector.loadConnector("fullConn2.txt")
P,D = iteratePoly(50, (poly,), (conn1,conn2))
massPDB(P,D,"folder_ex2")

Addendum 2. Known limitations
 - If you see very few polyhedra in your folder despite specifying many iterations, it is likely that the 
   collision detection algorithm is being too sensitive, and that it is deleting every new polyhedron as it
   is made for being too close to its parent polyhedron. 
   If you encounter this problem, you should make your connectors longer relative to your polyhedra.
 - If your polies reach coordinates past 9999 in any direction, they become deformed. Resize your initial polies
   by a factor of 10 to fix this. 